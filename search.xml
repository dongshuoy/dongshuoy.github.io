<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue踩坑总结 &amp; 优化点</title>
      <link href="/2019/04/09/vue/"/>
      <url>/2019/04/09/vue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近连着做了好几个vue项目，从0到版本迭代，vue教程算是好理解，把vue官方文档看一遍下来，基本上不会有什么大问题（嗯如果你看的够仔细够透彻的话），此篇是记录vue踩过的坑以及可以优化的地方。</p></blockquote><h1 id="1-路由变化页面数据不刷新问题"><a href="#1-路由变化页面数据不刷新问题" class="headerlink" title="1.路由变化页面数据不刷新问题"></a>1.路由变化页面数据不刷新问题</h1><p>出现这种情况是因为依赖路由的params参数获取写在created生命周期里面,因为相同路由二次甚至多次加载的关系 没有达到监听，退出页面再进入另一个文章页面并不会运行created组件生命周期,导致文章数据还是第一次进入的数据</p><p>解决方法：watch监听路由是否变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line"> // 方法1</span><br><span class="line">  &apos;$route&apos; (to, from) &#123; //监听路由是否变化</span><br><span class="line">    if(this.$route.params.articleId)&#123;// 判断条件1  判断传递值的变化</span><br><span class="line">      //获取文章数据</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //方法2</span><br><span class="line">  &apos;$route&apos;(to, from) &#123;</span><br><span class="line">    if (to.path == &quot;/page&quot;) &#123;    /// 判断条件2  监听路由名 监听你从什么路由跳转过来的</span><br><span class="line">       this.message = this.$route.query.msg     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h1 id="2-异步回调函数中使用this无法指向vue实例对象"><a href="#2-异步回调函数中使用this无法指向vue实例对象" class="headerlink" title="2. 异步回调函数中使用this无法指向vue实例对象"></a>2. 异步回调函数中使用this无法指向vue实例对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//setTimeout/setInterval ajax Promise等等</span><br><span class="line">data()&#123;</span><br><span class="line">  return&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods ()&#123;</span><br><span class="line">     setTimeout(function () &#123;   //其它几种情况相同</span><br><span class="line">      console.log(this);//此时this指向并不是vue实例 导致操作的一些ma&apos;f</span><br><span class="line">    &#125;,1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方案-变量赋值和箭头函数"><a href="#解决方案-变量赋值和箭头函数" class="headerlink" title="解决方案 变量赋值和箭头函数"></a>解决方案 变量赋值和箭头函数</h3><p><a href="https://blog.csdn.net/nfer_zhuang/article/details/48781671" target="_blank" rel="noopener">var和let的区别</a></p><h1 id="3-setInterval路由跳转继续运行并没有及时进行销毁"><a href="#3-setInterval路由跳转继续运行并没有及时进行销毁" class="headerlink" title="3. setInterval路由跳转继续运行并没有及时进行销毁"></a>3. setInterval路由跳转继续运行并没有及时进行销毁</h1><p>比如一些弹幕，走马灯文字，这类需要定时调用的，路由跳转之后，因为组件已经销毁了，但是setInterval还没有销毁，还在继续后台调用，控制台会不断报错，如果运算量大的话，无法及时清除，会导致严重的页面卡顿。</p><h3 id="解决办法：在组件生命周期beforeDestroy停止setInterval"><a href="#解决办法：在组件生命周期beforeDestroy停止setInterval" class="headerlink" title="解决办法：在组件生命周期beforeDestroy停止setInterval"></a>解决办法：在组件生命周期beforeDestroy停止setInterval</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//组件销毁前执行的钩子函数，跟其他生命周期钩子函数的用法相同。</span><br><span class="line">beforeDestroy()&#123;</span><br><span class="line">     //我通常是把setInterval()定时器赋值给this实例，然后就可以像下面这么停止。</span><br><span class="line">    clearInterval(this.intervalId);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="4-实现vue路由拦截浏览器的需求-进行一系列操作-草稿保存等等"><a href="#4-实现vue路由拦截浏览器的需求-进行一系列操作-草稿保存等等" class="headerlink" title="4. 实现vue路由拦截浏览器的需求,进行一系列操作 草稿保存等等"></a>4. 实现vue路由拦截浏览器的需求,进行一系列操作 草稿保存等等</h1><p>场景：<br>为了防止用户失误点错关闭按钮等等，导致没有保存已输入的信息(关键信息)。<br>用法：<br>//在路由组件中：<br>…<br>beforeRouteLeave (to, from, next) {<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(用户已经输入信息)&#123;</span><br><span class="line">    //出现弹窗提醒保存草稿，或者自动后台为其保存</span><br><span class="line">    </span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    next(true);//用户离开</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有beforeEach、beforeRouteUpdate这些生命周期函数 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">详情</a></p><h1 id="5-v-once-只渲染元素和组件一次，优化更新渲染性能"><a href="#5-v-once-只渲染元素和组件一次，优化更新渲染性能" class="headerlink" title="5. v-once 只渲染元素和组件一次，优化更新渲染性能"></a>5. v-once 只渲染元素和组件一次，优化更新渲染性能</h1><p>v-once这个指令相信大家用的很少,不过个人感觉还是挺实用的！</p><h3 id="只渲染元素和组件一次。随后的重新渲染，元素-组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。"><a href="#只渲染元素和组件一次。随后的重新渲染，元素-组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。" class="headerlink" title="只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。"></a>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</h3><p><a href="https://cn.vuejs.org/v2/api/#v-once" target="_blank" rel="noopener">详情</a></p><h1 id="6-vue本地代理配置-解决跨域问题-仅限于开发环境"><a href="#6-vue本地代理配置-解决跨域问题-仅限于开发环境" class="headerlink" title="6. vue本地代理配置 解决跨域问题,仅限于开发环境"></a>6. vue本地代理配置 解决跨域问题,仅限于开发环境</h1><p>这个本地代理用来解决开发环境下的跨域问题,跨域可谓老生常谈的问题了,proxy 在vue中配置代理非常简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//比方说你要访问 http://192.168.1.xxx:8888/backEnd/paper这个接口</span><br><span class="line">//配置  config.js下面proxyTable对象</span><br><span class="line">proxyTable: &#123;</span><br><span class="line">            &apos;/backEnd&apos;:&#123;</span><br><span class="line">                target:&apos;http://192.168.3.200:8888&apos;, //目标接口域名有端口可以把端口也写上</span><br><span class="line">                                                    //或者prot本地起服务端口与服务端统一</span><br><span class="line">                changeOrigin:true,    </span><br><span class="line">            &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 发送request请求</span><br><span class="line">   axios.get(&apos;/backEnd/page&apos;)  //按代理配置 匹配到/backEnd就代理到目标target地址</span><br><span class="line">    .then((res) =&gt; &#123;</span><br><span class="line">       console.log(res) // 数据完全拿得到  配置成功</span><br><span class="line">      this.newsList = res.data</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line"> 或者:</span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">                &apos;/api&apos;:&#123;</span><br><span class="line">                    target:&apos;http://192.168.3.200:8888&apos;, //目标接口域名有端口可以把端口也写上,或者prot本地起服务端口与服端统一               </span><br><span class="line">                    changeOrigin:true,</span><br><span class="line">                    pathRewrite: &#123;   //该属性重写接口把`/api`去掉</span><br><span class="line">                        &apos;^/api&apos;: &apos;&apos;</span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    // 发送request请求</span><br><span class="line">   axios.get(&apos;/api/backEnd/page&apos;)  //按代理配置 匹配到/backEnd就代理到目标target地址</span><br><span class="line">    .then((res) =&gt; &#123;</span><br><span class="line">       console.log(res) // 数据完全拿得到  配置成功</span><br><span class="line">      this.newsList = res.data</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>study-vue</title>
      <link href="/2019/04/02/study-vue/"/>
      <url>/2019/04/02/study-vue/</url>
      
        <content type="html"><![CDATA[<p><div align="center" width="100%"><br><img src="/2019/04/02/study-vue/1.jpg" width="100%" height="100%"><br><!-- ![你想要输入的替代文字](study-vue/1.jpg) --></div></p><h2 id><a href="#" class="headerlink" title></a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><p>da</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2019/03/29/newpapername/"/>
      <url>/2019/03/29/newpapername/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1554204987568&amp;di=f10ec4f5a03f74b885d75a6a0e794e8e&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.3h3.com%2Fup%2F2017-11%2F201711221024324869.jpg" alt="示例图片" title="示例图片"><br> 测试写文章</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/29/hello-world/"/>
      <url>/2019/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a> </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
